module tdma

    contains
        !>
        !> @brief       Solve many tridiagonal systems of equations using the Thomas algorithm.
        !>              First index indicates the number of independent many tridiagonal systems to use vectorization.
        !>              Second index indicates the row number in the tridiagonal system .
        !> @param       a       Coefficient array in lower diagonal elements
        !> @param       b       Coefficient array in diagonal elements
        !> @param       c       Coefficient array in upper diagonal elements
        !> @param       d       Coefficient array in the right-hand side terms
        !> @param       n1      Number of rows in each process, size of the tridiagonal matrix N divided by nprocs
        !> @param       n2      Number of tridiagonal systems per process
        !>
        attributes(global) subroutine tdma_many_cuda(a, b, c, d, n1, n2, nthds)
    
            implicit none
    
            integer, value, intent(in)      :: n1,n2,nthds
            double precision, intent(inout) :: a(n1,n2,nthds), b(n1,n2,nthds), c(n1,n2,nthds), d(n1,n2,nthds)
            
            integer :: i, j, k
            double precision :: r
    
            j = (blockidx%x-1) * blockdim%x + threadidx%x
            k = (blockidx%y-1) * blockdim%y + threadidx%y
    
            d(1,j,k)=d(1,j,k)/b(1,j,k)
            c(1,j,k)=c(1,j,k)/b(1,j,k)
    
            do i=2,n1
                r=1.d0/(b(i,j,k)-a(i,j,k)*c(i-1,j,k))
                d(i,j,k)=r*(d(i,j,k)-a(i,j,k)*d(i-1,j,k))
                c(i,j,k)=r*c(i,j,k)
            enddo
    
            do i=n1-1,1,-1
                d(i,j,k)=d(i,j,k)-c(i,j,k)*d(i+1,j,k)
            enddo
    
        ! !$cuf kernel do (2) <<< (1,1),(1,16) >>>
        !     do ti=1,nthds
        !         do j=1,n2
        !             d(1,j,ti)=d(1,j,ti)/b(1,j,ti)
        !             c(1,j,ti)=c(1,j,ti)/b(1,j,ti)
    
        !             do i=2,n1
        !                 r=1.d0/(b(i,j,ti)-a(i,j,ti)*c(i-1,j,ti))
        !                 d(i,j,ti)=r*(d(i,j,ti)-a(i,j,ti)*d(i-1,j,ti))
        !                 c(i,j,ti)=r*c(i,j,ti)
        !             enddo
    
        !             do i=n1-1,1,-1
        !                 d(i,j,ti)=d(i,j,ti)-c(i,j,ti)*d(i+1,j,ti)
        !             enddo
        !         enddo
        !     enddo
    
        end subroutine tdma_many_cuda
    
        !>
        !> @brief       Solve many cyclic tridiagonal systems of equations using the Thomas algorithm.
        !>              First index indicates the number of independent many tridiagonal systems to use vectorization.
        !>              Second index indicates the row number in the tridiagonal system.
        !> @param       a       Coefficient array in lower diagonal elements
        !> @param       b       Coefficient array in diagonal elements
        !> @param       c       Coefficient array in upper diagonal elements
        !> @param       d       Coefficient array in the right-hand side terms
        !> @param       n1      Number of rows in each process, size of the tridiagonal matrix N divided by nprocs
        !> @param       n2      Number of tridiagonal systems per process
        !>
    
        attributes(global) subroutine tdma_cycl_many_cuda(a, b, c, d, n1, n2, nthds)
    
            implicit none
    
            integer, value, intent(in)      :: n1,n2,nthds
            double precision, intent(inout) :: a(n1,n2,nthds), b(n1,n2,nthds), c(n1,n2,nthds), d(n1,n2,nthds)
            
            integer :: i, j, k
            double precision :: e(1:n1)
            double precision :: r
    
            j = (blockidx%x-1) * blockdim%x + threadidx%x
            k = (blockidx%y-1) * blockdim%y + threadidx%y
    
            do i=1,n1
                e(i)  = 0.0d0
            enddo
            e(2)  = -a(2,j,k)
            e(n1) = -c(n1,j,k)
    
            d(2,j,k) = d(2,j,k) / b(2,j,k)
            e(2)     = e(2)     / b(2,j,k)
            c(2,j,k) = c(2,j,k) / b(2,j,k)
    
            do i=3,n1
                r       = 1.d0/(b(i,j,k)-a(i,j,k)*c(i-1,j,k))
                d(i,j,k)= r*(d(i,j,k)-a(i,j,k)*d(i-1,j,k))
                e(i)    = r*(e(i)-a(i,j,k)*e(i-1))
                c(i,j,k)= r*c(i,j,k)
            enddo
    
            do i=n1-1,2,-1
                d(i,j,k) = d(i,j,k)-c(i,j,k)*d(i+1,j,k)
                e(i)     = e(i)-c(i,j,k)*e(i+1)
            enddo
    
            d(1,j,k) = (d(1,j,k)-a(1,j,k)*d(n1,j,k)-c(1,j,k)*d(2,j,k))/(b(1,j,k)+a(1,j,k)*e(n1)+c(1,j,k)*e(2))
    
            do i=2,n1
                d(i,j,k) = d(i,j,k) + d(1,j,k)*e(i)
            enddo
    
    ! !$cuf kernel do (2) <<< (1,1),(1,16) >>>
    !         do ti=1,nthds
    !             do j=1,n2
    !                 e(:)  =0.0d0
    !                 e(2)  = -a(2,j,ti)
    !                 e(n1) = -c(n1,j,ti)
    
    !                 d(2,j,ti)=d(2,j,ti)/b(2,j,ti)
    !                 e(2)     =e(2)   /b(2,j,ti)
    !                 c(2,j,ti)=c(2,j,ti)/b(2,j,ti)
    
    !                 do i=3,n1
    !                     r=1.d0/(b(i,j,ti)-a(i,j,ti)*c(i-1,j,ti))
    !                     d(i,j,ti)=r*(d(i,j,ti)-a(i,j,ti)*d(i-1,j,ti))
    !                     e(i)=r*(e(i)-a(i,j,ti)*e(i-1))
    !                     c(i,j,ti)=r*c(i,j,ti)
    !                 enddo
    
    !                 do i=n1-1,2,-1
    !                     d(i,j,ti)=d(i,j,ti)-c(i,j,ti)*d(i+1,j,ti)
    !                     e(i)=e(i)-c(i,j,ti)*e(i+1)
    !                 enddo
    
    !                 d(1,j,ti)=(d(1,j,ti)-a(1,j,ti)*d(n1,j,ti)-c(1,j,ti)*d(2,j,ti))/(b(1,j,ti)+a(1,j,ti)*e(n1)+c(1,j,ti)*e(2))
    
    !                 do i=2,n1
    !                     d(i,j,ti) = d(i,j,ti) + d(1,j,ti)*e(i)
    !                 enddo
    !             enddo
    !         enddo
    
        end subroutine tdma_cycl_many_cuda
    
    end module tdma